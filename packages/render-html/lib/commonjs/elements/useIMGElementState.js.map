{"version":3,"sources":["useIMGElementState.ts"],"names":["getImageSizeAsync","uri","headers","Promise","onsuccess","onerror","onImageDimensionsSuccess","width","height","cachedImage","ImageCache","get","getCachedImagePath","authorizationError","cachedImagePath","path","undefined","RNFetchBlob","fs","exists","then","Image","getSize","getSizeWithHeaders","useImageNaturalDimensions","props","source","cachedNaturalDimensions","naturalDimensions","setNaturalDimensions","cachedNaturalWidth","cachedNaturalHeight","error","setError","resetOnURIChange","onNaturalDimensions","onError","useFetchedNaturalDimensions","hasCachedDimensions","fetchPhysicalDimensions","cancelled","dimensions","catch","e","useIMGElementState","alt","altColor","contentWidth","computeMaxWidth","objectFit","initialDimensions","defaultImageInitialDimensions","flatStyle","specifiedDimensions","nomalizedSource","concreteDimensions","containerStyle"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Image, ImageURISource } from 'react-native';\nimport {\n  UseIMGElementStateProps,\n  IMGElementState,\n  IncompleteImageDimensions\n} from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport useIMGNormalizedSource from './useIMGNormalizedSource';\nimport { ImageDimensions } from '../shared-types';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport { getIMGState } from './getIMGState';\nimport useImageSpecifiedDimensions from './useImageSpecifiedDimensions';\nimport { ImageCache } from './CachedImage';\nimport RNFetchBlob from 'react-native-fetch-blob';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  headers: any;\n  uri: string;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    const cachedImage = ImageCache.get().getCachedImagePath(uri);\n    if (cachedImage && cachedImage.authorizationError) {\n      return onerror();\n    }\n    const cachedImagePath = cachedImage && cachedImage.path || undefined;\n    if(cachedImagePath) {\n      // We have image uri in ImageCache.\n      // We check here if IOS didn't delete the cache content\n      RNFetchBlob.fs.exists(cachedImagePath).then((exists: boolean) => {\n        if (exists) {\n          Image.getSize(cachedImagePath, onImageDimensionsSuccess, onerror);\n        } else {\n          if (headers) {\n            Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n          } else {\n            Image.getSize(uri, onImageDimensionsSuccess, onerror);\n          }\n        }\n      });\n    }\n    else {\n      if (headers) {\n        Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n      } else {\n        Image.getSize(uri, onImageDimensionsSuccess, onerror);\n      }\n    }\n  });\n}\n\nfunction useImageNaturalDimensions<P extends UseIMGElementStateProps>(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const [naturalDimensions, setNaturalDimensions] = useState<\n    P['cachedNaturalDimensions'] extends ImageDimensions\n      ? ImageDimensions\n      : ImageDimensions | null\n  >((cachedNaturalDimensions as any) || null);\n  const { width: cachedNaturalWidth, height: cachedNaturalHeight } =\n    cachedNaturalDimensions || {};\n  const [error, setError] = useState<null | Error>(null);\n  useEffect(\n    function resetOnURIChange() {\n      setNaturalDimensions(\n        (cachedNaturalWidth != null && cachedNaturalHeight != null\n          ? { width: cachedNaturalWidth, height: cachedNaturalHeight }\n          : null) as any\n      );\n      setError(null);\n    },\n    [cachedNaturalHeight, cachedNaturalWidth, source.uri]\n  );\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions,\n    error\n  };\n}\n\nfunction useFetchedNaturalDimensions(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const { error, naturalDimensions, onError, onNaturalDimensions } =\n    useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions,\n    cachedNaturalDimensions\n  } = props;\n  const { flatStyle, specifiedDimensions } = useImageSpecifiedDimensions(props);\n  const nomalizedSource = useIMGNormalizedSource({\n    specifiedDimensions,\n    source\n  });\n  const { naturalDimensions, onError, error } = useFetchedNaturalDimensions({\n    source: nomalizedSource,\n    specifiedDimensions,\n    cachedNaturalDimensions\n  });\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source: nomalizedSource\n  });\n}\n"]}